function init (obj)
	xr_motivator.AddToMotivator(obj)
end

function actor_init (npc)
	npc:bind_object(actor_binder(npc))
end

local game_difficulty_by_num = {
	[0] = "gd_novice",
	[1] = "gd_stalker",
	[2] = "gd_veteran",
	[3] = "gd_master"
	}

lasthealth	= 0
lasttime	= 0
post_process = 0
local weapon_hide = false
----------------------------------------------------------------------------------------------------------------------
class "actor_binder" (object_binder)
----------------------------------------------------------------------------------------------------------------------
function actor_binder:__init (obj) super(obj)
	self.bCheckStart = false
	self.weather_manager = level_weathers.WeatherManager()
	self.actor_detector = xr_detector.actor_detector()
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_spawn(data)
	level.show_indicators()
	level.set_snd_volume( 1 )
	
	self.bCheckStart = true
	self.weapon_hide = false -- спрятано или нет оружие при разговоре.
	weapon_hide = false -- устанавливаем глобальный дефолтовый флаг.
	
	if object_binder.net_spawn(self,data) == false then
		return false
	end
	
	db.add_actor(self.object)
	
	if self.st.disable_input_time == nil then
		level.enable_input()
	end
	
	self.weather_manager:reset()
	
	if(actor_stats.add_to_ranking~=nil)then
		actor_stats.add_to_ranking(self.object:id())
	end
	
	cmd("r2_ls_bloom_threshold 1.") --Избавляемся от пересветов
	cmd("r2_gloss_factor 1.") --Избавляемся от пересветов
	cmd("r2_rain_drops_control on") --капли на стекле
	--cmd("r2_lens_dirt_control on") --грязь на линзе
	cmd("cam_inert 0") --сбрасываем инерцию камеры в 0
	cmd("g_cop_death_anim 0") --Отключаем Death Anims, с ними куча багов.
	cmd("r3_minmax_sm off") --От этого фпс дропается у некоторых при долгой игре.
	if get_console():get_integer("r3_dynamic_wet_surfaces_sm_res") < 1024 then
		cmd("r3_dynamic_wet_surfaces_sm_res 1024") --Чтобы полос на стенах не было во время дождя.
	end
	cmd("g_3d_scopes on") --Чтобы кто-нибудь особо умный не выключил 3д прицелы через консоль.
	cmd("r2_exp_donttest_shad off") --С вкл окклюдером хоть тени на худе и мерцают, но он экономит фпс. В будущих релизах движка он будет переписан, и там это будет доправлено. Поэтому отключать его всё таки не надо.
	
	--' Загружаем настройки дропа
	death_manager.init_drop_settings()
	
	amk.on_game_load()
	
	if xrs_ai then xrs_ai.actor_net_spawn(self) end
	
-- Вызов уборщика оружия
	uzi_off_weapons.off_weapons()
	
	-- added by xmk
	-- Новости(фильтр левелов)
	news_main.filter()
	
	-- teleports_by_Mora_&_kenguru --
	spawn_teleport.spawn_teleport_baza()
	spawn_teleport.spawn_teleport_marsh()
	spawn_teleport.spawn_teleport_river_to_pripyat()
	
	east_pripyat_dialog.german_message()
	puzir_dialog.klyk_message()
	av_peshera_dialog.find_av_peshera()
	generators_dialog.find_generators()
	warlab_dialog.find_warlab()
	sarcofag_dialog.find_sarcofag()
	swamp_old_dialog.respawn_klyk()
	predbannik_dialog.spawn_gpistol()
	
	-- Гашение костров возле вертушки
	if level.name() == "l06_rostok" and has_alife_info("yantar_tunnel_finish") and (not has_alife_info("heli_campfire_off")) then
		for a=10,65535,1 do
			local obj=alife():object(a)
			
			if obj and (string.find(obj:name(),"zone_flame_heli_1") or string.find(obj:name(),"zone_flame_heli_2") or string.find(obj:name(),"zone_flame_heli_3") or string.find(obj:name(),"zone_flame_heli_4") or string.find(obj:name(),"zone_flame_heli_5") or string.find(obj:name(),"zone_flame_heli_6") or string.find(obj:name(),"zone_flame_heli_7") or string.find(obj:name(),"zone_flame_heli_8")) then
				alife():release(obj,true)
			end
		end
		
		db.actor:give_info_portion("heli_campfire_off")
	end
	
	if level.name() == "pripyat" and has_alife_info("take_message_strelok") and (not has_alife_info("spawn_raport_mon")) then
		amk.g_start_timer("mg4",0, 0, 1)
		db.actor:give_info_portion("spawn_raport_mon")
	end
	
	--Показ статиков жажды
	if has_alife_info("start_water_1") and (not has_alife_info("start_water_2")) and (not has_alife_info("start_water_3")) then
		get_hud():AddCustomStatic("water_green", true)
	end
	
	if has_alife_info("start_water_1") and has_alife_info("start_water_2") and (not has_alife_info("start_water_3")) then
		get_hud():AddCustomStatic("water_yellow", true)
	end
	
	if has_alife_info("start_water_1") and has_alife_info("start_water_2") and has_alife_info("start_water_3") then
		get_hud():AddCustomStatic("water_red", true)
	end
	
	return true
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_destroy()
	if(actor_stats.remove_from_ranking~=nil)then
		actor_stats.remove_from_ranking(self.object:id())
	end
--	game_stats.shutdown ()
	db.del_actor(self.object)

	sr_light.clean_up ()

	self.object:set_callback(callback.inventory_info, nil)
	self.object:set_callback(callback.article_info, nil)
	self.object:set_callback(callback.on_item_take, nil)
	self.object:set_callback(callback.on_item_drop, nil)
	--self.object:set_callback(callback.actor_sleep, nil)
	self.object:set_callback(callback.task_state, nil)
	self.object:set_callback(callback.level_border_enter, nil)
	self.object:set_callback(callback.level_border_exit, nil)
	self.object:set_callback(callback.take_item_from_box, nil)
	self.object:set_callback(callback.use_object, nil)

	if sr_psy_antenna.psy_antenna then
		sr_psy_antenna.psy_antenna:destroy()
		sr_psy_antenna.psy_antenna = false
	end

	xr_sound.stop_all_sound_object()

	object_binder.net_destroy(self)

end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:reinit()
	object_binder.reinit(self)
	
	local npc_id = self.object:id()

	db.storage[npc_id] = { }

	self.st = db.storage[npc_id]
	self.st.pstor = nil

	self.next_restrictors_update_time = -10000

	self.object:set_callback(callback.inventory_info, self.info_callback, self)
	self.object:set_callback(callback.article_info, self.article_callback, self)
	self.object:set_callback(callback.on_item_take, self.on_item_take, self)
	self.object:set_callback(callback.on_item_drop, self.on_item_drop, self)
	self.object:set_callback(callback.trade_sell_buy_item, self.on_trade, self) -- for game stats
	--self.object:set_callback(callback.actor_sleep, self.sleep_callback, self)
	self.object:set_callback(callback.task_state, self.task_callback, self)
	--self.object:set_callback(callback.map_location_added, self.map_location_added_callback, self)
	self.object:set_callback(callback.level_border_enter, self.level_border_enter, self)
	self.object:set_callback(callback.level_border_exit, self.level_border_exit, self)
	self.object:set_callback(callback.take_item_from_box, self.take_item_from_box, self)
	self.object:set_callback(callback.use_object, self.use_inventory_item, self)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:take_item_from_box(box, item)
	local story_id = box:story_id()
	if story_id == nil then
		return
	end

	treasure_manager.take_item_from_box(box, story_id)
--[[	
	local respawner = se_respawn.get_respawner_by_parent(story_id)
	if respawner == nil then
		return
	end
	
	--' Необходимо уменьшить счетчик в респавнере
	respawner:remove_spawned(item:id())

	local smart_terrain = db.strn_by_respawn[respawner:name()]
	if smart_terrain == nil then
		return
	end

	local npc = smart_terrain.gulag:get_nearest_online_obj(db.actor:position())
	if npc ~= nil then
		xr_sound.set_sound_play(npc, "reac_box")
		xr_gulag.setGulagEnemy(smart_terrain:name() , db.actor)
	end
]]
	if item:section() == "pack_money" then
		db.actor:give_info_portion("have_money")
	end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:use_inventory_item(obj)
	if string.find(obj:section(), "spichki") then
		uzi_sounds.snd_Spichki()
		ogsm_quests.check_use_Spichki(obj)
	end
	if string.find(obj:section(), "chay") then
		ogsm_quests.check_use_Chay(obj)
	end
	if string.find(obj:section(), "repair_kit") then
		repair.check_use_kit(obj)
	end
	if string.find(obj:section(), "vodka_a") then
		ogsm_quests.check_use_vodka_half(obj)
		ogsm_quests.check_use_Superdrugs(obj)
		uzi_sounds.snd_vodka()
	end
	if string.find(obj:section(), "vodka") then
		ogsm_quests.check_use_vodka(obj)
		ogsm_quests.check_use_dry_foodsOrDrugs(obj)
		uzi_sounds.snd_vodka()
	end
	if string.find(obj:section(), "vodka_half") then
		ogsm_quests.check_use_vodka_half(obj)
		ogsm_quests.check_use_dry_foodsOrDrugs(obj)
		uzi_sounds.snd_vodka()
	end
	if string.find(obj:section(), "nuts") then
		ogsm_quests.check_use_dry_foodsOrDrugs(obj)
		uzi_sounds.snd_nuts()
	end
	if string.find(obj:section(), "salo") then
		ogsm_quests.check_use_dry_foodsOrDrugs(obj)
		uzi_sounds.snd_conserva()
	end
	if string.find(obj:section(), "irp") then
		ogsm_quests.check_use_wet_foods(obj)
		ogsm_quests.check_use_irp(obj)
		uzi_sounds.snd_food()
	end
	if string.find(obj:section(), "irp_two") then
		ogsm_quests.check_use_wet_foods(obj)
		ogsm_quests.check_use_irp_two(obj)
		uzi_sounds.snd_food()
	end
	if string.find(obj:section(), "irp_one") then
		ogsm_quests.check_use_wet_foods(obj)
		uzi_sounds.snd_food()
	end
	if string.find(obj:section(), "mre") then
		ogsm_quests.check_use_dry_foodsOrDrugs(obj)
		uzi_sounds.snd_food()
	end
	if string.find(obj:section(), "sandwich") then
		ogsm_quests.check_use_dry_foodsOrDrugs(obj)
		uzi_sounds.snd_food()
	end
	if string.find(obj:section(), "sigaret") then
		ogsm_quests.check_use_dry_foodsOrDrugs(obj)
	end
	if string.find(obj:section(), "sweetness") then
		ogsm_quests.check_use_dry_foodsOrDrugs(obj)
		uzi_sounds.snd_conserva()
	end
	if string.find(obj:section(), "batat") then
		ogsm_quests.check_use_dry_foodsOrDrugs(obj)
		uzi_sounds.snd_conserva()
	end
	if string.find(obj:section(), "galet") then
		uzi_sounds.snd_nuts()
	end
	if string.find(obj:section(), "sgus") then
		ogsm_quests.check_use_dry_foodsOrDrugs(obj)
		uzi_sounds.snd_conserva()
	end
	if string.find(obj:section(), "bread") then
		ogsm_quests.check_use_dry_foodsOrDrugs(obj)
		uzi_sounds.snd_food()
	end
	if string.find(obj:section(), "bread_a") then
		ogsm_quests.check_use_dry_foodsOrDrugs(obj)
		uzi_sounds.snd_food()
	end
	if string.find(obj:section(), "antirad") then
		ogsm_quests.check_use_dry_foodsOrDrugs(obj)
	end
	if string.find(obj:section(), "medkit") then
		ogsm_quests.check_use_dry_foodsOrDrugs(obj)
	end
	if string.find(obj:section(), "medkit_army") then
		ogsm_quests.check_use_dry_foodsOrDrugs(obj)
	end
	if string.find(obj:section(), "medkit_scientic") then
		ogsm_quests.check_use_dry_foodsOrDrugs(obj)
	end
	if string.find(obj:section(), "vodka_u") then
		ogsm_quests.check_use_Superdrugs(obj)
		uzi_sounds.snd_sok()
	end
	
	if string.find(obj:section(), "flaska") then
		ogsm_quests.check_use_water(obj)
		uzi_sounds.snd_sok()
	end
	if string.find(obj:section(), "flaska_half") then
		ogsm_quests.check_use_waterHalf(obj)
		uzi_sounds.snd_sok()
	end
	if string.find(obj:section(), "beer") then
		ogsm_quests.check_use_wet_foods(obj)
		uzi_sounds.snd_sok()
	end
	if string.find(obj:section(), "sok") then
		ogsm_quests.check_use_wet_foods(obj)
		uzi_sounds.snd_sok()
	end
	if string.find(obj:section(), "energy_drink") then
		ogsm_quests.check_use_wet_foods(obj)
		uzi_sounds.snd_soft()
	end
	if string.find(obj:section(), "chaek") then
		ogsm_quests.check_use_wet_foods(obj)
		ogsm_quests.givePower()
		uzi_sounds.snd_sok()
	end
	if string.find(obj:section(), "olives") then
		ogsm_quests.check_use_wet_foods(obj)
		uzi_sounds.snd_conserva()
	end
	if string.find(obj:section(), "sup") then
		ogsm_quests.check_use_wet_foods(obj)
		uzi_sounds.snd_conserva()
	end
	if string.find(obj:section(), "sardina") then
		uzi_sounds.snd_conserva()
	end
	if string.find(obj:section(), "syrok") then
		uzi_sounds.snd_conserva()
	end
	if string.find(obj:section(), "kolbasa") then
		ogsm_quests.check_use_dry_foodsOrDrugs(obj)
		uzi_sounds.snd_food()
	end
	if string.find(obj:section(), "conserva") then
		uzi_sounds.snd_conserva()
	end
	if string.find(obj:section(), "egg") then
		uzi_sounds.snd_conserva()
	end
	if string.find(obj:section(), "termos_f") then
		ogsm_quests.check_use_water(obj)
		ogsm_quests.givePower()
		uzi_sounds.snd_sok()
	end
	if string.find(obj:section(), "termos_h") then
		ogsm_quests.check_use_water(obj)
		ogsm_quests.givePower()
		uzi_sounds.snd_sok()
	end
end
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
function actor_binder:level_border_enter(npc, info_id)
	self.actor_detector:actor_enter()
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:level_border_exit(npc, info_id)
	self.actor_detector:actor_exit()
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:info_callback(npc, info_id)
	--printf("*INFO*: npc='%s' id='%s'", npc:name(), info_id)
	--' Сюжет
	level_tasks.proceed(self.object)
	-- Отметки на карте
	level_tasks.process_info_portion(info_id)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_trade (item, sell_bye, money)
	if sell_bye == true then
	   game_stats.money_trade_update (money)
	else	   
	   game_stats.money_trade_update (-money) 
	end	  
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:article_callback(npc, group, name, article_type)
	--printf("article_callback [%s][%s]", group, name)
	if device().precache_frame >1 then return end
	
	if group == "Diary" then
		news_manager.send_encyclopedy("diary", group)
		amk.send_tip(game.translate_string(name), "Заметка в журнале:", nil, 7)
	elseif group == "Mutants" then
		news_manager.send_encyclopedy("encyclopedy", group)
		amk.send_tip(game.translate_string(name), "Заметка о мутантах:", nil, 7)
	elseif group == "Social" then
		news_manager.send_encyclopedy("encyclopedy", group)
		amk.send_tip(game.translate_string(name), "Информация о группировке:", nil, 7)
	elseif group == "Artifacts" then
		news_manager.send_encyclopedy("encyclopedy", group)
		amk.send_tip(game.translate_string(name), "Заметка об артефактах:", nil, 7)
	elseif group == "Anomalies" then
		news_manager.send_encyclopedy("encyclopedy", group)
		amk.send_tip(game.translate_string(name), "Заметка об аномалиях:", nil, 7)
	elseif group == "Locations" then
		news_manager.send_encyclopedy("encyclopedy", group)
		amk.send_tip(game.translate_string(name), "Информация о локации:", nil, 7)
	elseif group == "Zone-story" then
		news_manager.send_encyclopedy("encyclopedy", group)
		amk.send_tip(game.translate_string(name), "История Зоны:", nil, 7)
	elseif group == "Stories" then
		news_manager.send_encyclopedy("encyclopedy", group)
		amk.send_tip(game.translate_string(name), "Местный фольклор:", nil, 7)
	elseif group == "memuars" then
		news_manager.send_encyclopedy("encyclopedy", group)
		amk.send_tip(game.translate_string(name), "Личная заметка:", nil, 7)
	elseif group == "Found_PDA" then
		news_manager.send_encyclopedy("encyclopedy", group)
		amk.send_tip(game.translate_string(name), "Скачаны данные:", nil, 7)
	elseif group == "st_operation_agroprom" or group == "LabX18_information" or group == "aes_military_task" then
		news_manager.send_encyclopedy("encyclopedy", group)
		amk.send_tip(game.translate_string(name), "Заметка в журнале:", nil, 7)
	end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_item_take (obj)
	level_tasks.proceed(self.object)
	--game_stats.update_take_item (obj, self.object)
	if xrs_ai then xrs_ai.actor_item_take(obj) end
	if obj:section() == "unknown_pda" then
	  if not has_alife_info("have_yanold_secrets") then
		 treasure_manager.get_treasure_manager():give_treasure("yanold_treasure_1")
		 treasure_manager.get_treasure_manager():give_treasure("yanold_treasure_2")
		 treasure_manager.get_treasure_manager():give_treasure("yanold_treasure_3")
		 db.actor:give_info_portion("have_yanold_secrets")
	  end
	end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_item_drop (obj)
	level_tasks.proceed(self.object)
	amk.on_item_drop(obj)
end
----------------------------------------------------------------------------------------------------------------------

function actor_binder:task_callback(_task, _objective, _state)
	task_manager.task_callback(_task:get_id(), _objective:get_idx(), _state)
	if _objective:get_idx() == 0 then
		if _state == task.fail then
			news_manager.send_task(db.actor, "fail", _task, _objective)
		elseif _state == task.completed then
			task_manager.reward_by_task(_task)
			news_manager.send_task(db.actor, "complete", _task, _objective)
		else
			news_manager.send_task(db.actor, "new", _task, _objective)
		end
	else
		if _task:get_objective(0):get_state() == task.in_progress then
			news_manager.send_task(db.actor, "update", _task, _objective)
		end
	end
end

----------------------------------------------------------------------------------------------------------------------
function actor_binder:map_location_added_callback(spot_type_str, object_id)
	if (false==app_ready()) or (device().precache_frame>1) then return end
	--'news_manager.send_task(db.actor, "new")
end
----------------------------------------------------------------------------------------------------------------------


function actor_binder:update(delta)
	object_binder.update(self, delta)

	-- DEBUG slowdown
--	slowdown.update()
	local my_first = true

	local time = time_global()
	
	game_stats.update (delta, self.object)

	effect_blood.wounded_pp_update()
	effect_blood.wounded_pp_update()

	-- game_time.show_time()

	-- Обновление сна
	if sleep_manager.is_sleep_active() and xr_conditions.actor_dead() then
		xr_logic.issue_event(db.actor, db.storage[db.actor:id()]["ar_sleep"], "update")
	end
	
	if my_first then
		local slot4 = db.actor:item_in_slot(4)
		
		if slot4 then
			if slot4:section() ~= "wpn_binoc" then
				alife():release(alife():object(slot4:id()), true)
				amk.spawn_item_in_inv("wpn_binoc", db.actor)
			end
		end
		
		my_first = false
	end
	
	-- апдейт погоды
	self.weather_manager:update()
	
	-- апдейт схемы детектора
	self.actor_detector:update()

	-- апдейт звуковой схемы актера
	xr_sound.update_actor()
	
	--' Проверка потери жизни
--[[
	if self.object.health - lasthealth > 0.001 or
	   self.object.health - lasthealth < -0.001 then
		printf("%f | %f", self.object.health, self.object.health - lasthealth, game.time() - lasttime)
		lasthealth = self.object.health
		lasttime = game.time()
	end
--]]	
	-- Обновление отключения ввода с клавиатуры.
	if self.st.disable_input_time ~= nil and
	   game.get_game_time():diffSec(self.st.disable_input_time) >= self.st.disable_input_idle 
	then
		level.enable_input()
		self.st.disable_input_time = nil
	end
	-- Обновление сна с переносом чувака в указанную позицию
	if self.st.sleep_relocate_time ~= nil and
	   game.get_game_time():diffSec(self.st.sleep_relocate_time) >= self.st.sleep_relocate_idle 
	then
		self.object:set_actor_position(self.st.sleep_relocate_point)
		local dir = self.st.sleep_relocate_point:sub(self.st.sleep_relocate_look)
		self.object:set_actor_direction(dir:getH())
		self.st.sleep_relocate_time = nil
	end

	-- Апдейт прятания оружия игрока во время диалога
	if weapon_hide == true or self.object:is_talking() then
		if self.weapon_hide == false then
			self.object:hide_weapon()
			self.weapon_hide = true
		end
	else
		if self.weapon_hide == true then
			self.object:restore_weapon()
			self.weapon_hide = false
		end
	end	

	-- обновление рестрикторов, которые под логикой, срабатывает через интервалы времени
	if self.next_restrictors_update_time < time then
		bind_restrictor.actor_update(delta)
		bind_mteleport.actor_update(delta)
		self.next_restrictors_update_time = time + 200

		task_manager.actor_update()
	end

	-- обновление постпроцессов
	if post_process ~= 0 then
		if post_process:update () == true then
		   post_process = 0
		end
	end

	-- обновление пси-антенны
	if sr_psy_antenna.psy_antenna then
		sr_psy_antenna.psy_antenna:update(delta)
	end

	--' Вывод сообщения о большой радиации
	if self.object.radiation >= 0.7 then
		local hud = get_hud()
		local custom_static = hud:GetCustomStatic("cs_radiation_danger")
		if custom_static == nil then
			hud:AddCustomStatic("cs_radiation_danger", true)
			hud:GetCustomStatic("cs_radiation_danger"):wnd():SetTextST("st_radiation_danger")
		end
	else
		local hud = get_hud()
		local custom_static = hud:GetCustomStatic("cs_radiation_danger")
		if custom_static ~= nil then
			hud:RemoveCustomStatic("cs_radiation_danger")
		end
	end
	
	-- Обновление шкалы радиации
	if (ui_rad and self.object) then
		ui_rad.update(self.object)
	end
	
	-- проверка лечения броней
	uzi_armor.update(time)
	
	-- Запускаем затычку от возможной потери содержимого тайников
	treasure_manager.get_treasure_manager():loss_workaround()
	
	if self.bCheckStart then
		--printf("SET DEFAULT INFOS")		
		if not has_alife_info("storyline_actor_start") and (level.name() == "predbannik") then
			self.object:give_info_portion("storyline_actor_start")
			_G.g_start_avi = true
			--printf("*AVI* RUN START AVI")			
		end
		
--		if not has_alife_info("encyclopedy") then
--			self.object:give_info_portion("encyclopedy")
--		end

		if not has_alife_info("global_dialogs") then
			self.object:give_info_portion("global_dialogs")
		end
		
		if not has_alife_info("level_changer_icons") then
			self.object:give_info_portion("level_changer_icons")
		end
		
		level_tasks.add_lchanger_location()
		self.bCheckStart = false
	end
	
	-- Обновление актора
	amk.on_actor_update()
	
	-- Обновление АИ-пака
	if xrs_ai then xrs_ai.actor_update(delta) end
	
	--added by xmk
	-- Новости
	news_main_data.show_news_main()
	
	
	-- Взятие денег из схрона
	if has_alife_info("have_money") and has_alife_info("ui_car_body_hide") then
		local cond = math.ceil(math.random(25,55)*100)
		local col = 0
		local count = db.actor:object_count() - 1
		
		for i=0, count do
			local item = db.actor:object(i)
			
			 if item:section() == "pack_money" then
				local sobj = alife():object(item:id())
				
				if sobj then
					col = col + 1
					alife():release(sobj,true)
				end
			 end
			
			 if i == count then
				cond = cond * col
				db.actor:give_money(cond)
				local text = "Найдено "..cond.." руб.\\nИтого теперь "..db.actor:money().." руб."
				news_manager.send_tip(db.actor, text, nil, nil, 30000)
				db.actor:disable_info_portion("have_money")
			end
		end
	end
	
	--Запуск телепорта на другой берег Припяти
	if has_alife_info("on_teleport") then
		spawn_teleport.spawn_teleport_pripyat_to_river()
	end
	
	generators_dialog.remove_label()
	
	--Переспавн Мухомора
	if (has_alife_info("third_talking_muhomor")) and (not has_alife_info("respawn_muhomor")) and (level.name() ~= "l03u_agr_underground") then
		db.actor:give_info_portion("respawn_muhomor")
	end

	--Отследим смерть Лукаша до разговора с ним по квесту Бродяги
	if (has_alife_info("mil_lukash_dead")) and (has_alife_info("first_dialog_atp")) and (not has_alife_info("lukash_dead")) and (not has_alife_info("dialog_military")) then
		db.actor:give_info_portion("lukash_dead")
	end

	--Защита группы Мурзы
	if (not has_alife_info("mozol_death")) and (not has_alife_info("murza_death")) and (not has_alife_info("shilo_death")) and (not has_alife_info("vorot_death")) and (not has_alife_info("yashka_death")) and (not has_alife_info("save_murza_group")) and (has_alife_info("marsh_bloodsucker_death")) then
		db.actor:give_info_portion("save_murza_group")
	end

	--Сдача Лукашу лечебного Берилла
	if not has_alife_info("lukash_have_berill") then
		local t = task_manager.get_random_task().task_info
		
		if t and t["freedom_find_item_3"].status == "rewarded" then
			db.actor:give_info_portion("lukash_have_berill")
		end
	end

	--Запуск квеста на Портовых кранах
	if has_alife_info("zaton_dialog_road") and (not has_alife_info("start_quest_kranes")) then
		local t = task_manager.get_random_task().task_info
		
		if t and t["juk_eliminate_camp_1"].status == "completed" then
			amk.g_start_timer("kran1",0,0,1)
			db.actor:give_info_portion("start_quest_kranes")
		end
	end

	if has_alife_info("ui_pda") then
		level_tasks.remove_location(50401, "level_changer")
		level_tasks.remove_location(50402, "level_changer")
		level_tasks.remove_location(50601, "level_changer")
		level_tasks.remove_location(50602, "level_changer")
		level_tasks.remove_location(51001, "level_changer")
		level_tasks.remove_location(51002, "level_changer")
		level_tasks.remove_location(51601, "level_changer")
		level_tasks.remove_location(51602, "level_changer")
		level_tasks.remove_location(51701, "level_changer")
		level_tasks.remove_location(51702, "level_changer")
		level_tasks.remove_location(52001, "level_changer")
		level_tasks.remove_location(52002, "level_changer")
		level_tasks.remove_location(52003, "level_changer")
		level_tasks.remove_location(52301, "level_changer")
		level_tasks.remove_location(52302, "level_changer")
		level_tasks.remove_location(52303, "level_changer")
		level_tasks.remove_location(52601, "level_changer")
		level_tasks.remove_location(53001, "level_changer")
		level_tasks.remove_location(53801, "level_changer")
		level_tasks.remove_location(53802, "level_changer")
		level_tasks.remove_location(53803, "level_changer")
		level_tasks.remove_location(53804, "level_changer")
		level_tasks.remove_location(53805, "level_changer")
		level_tasks.remove_location(53806, "level_changer")
		level_tasks.remove_location(53807, "level_changer")
		level_tasks.remove_location(53808, "level_changer")
		level_tasks.remove_location(53809, "level_changer")
		level_tasks.remove_location(53810, "level_changer")
		level_tasks.remove_location(53811, "level_changer")
		level_tasks.remove_location(53901, "level_changer")
		level_tasks.remove_location(54001, "level_changer")
		level_tasks.remove_location(54002, "level_changer")
		level_tasks.remove_location(54105, "level_changer")
		level_tasks.remove_location(54404, "level_changer")
		level_tasks.remove_location(54405, "level_changer")
		level_tasks.remove_location(54406, "level_changer")
		level_tasks.remove_location(54409, "level_changer")
		level_tasks.remove_location(54412, "level_changer")
		level_tasks.remove_location(54413, "level_changer")
		level_tasks.remove_location(54414, "level_changer")
		level_tasks.remove_location(54415, "level_changer")
		level_tasks.remove_location(54416, "level_changer")
		level_tasks.remove_location(54418, "level_changer")
		level_tasks.remove_location(54419, "level_changer")
		level_tasks.remove_location(54420, "level_changer")
		level_tasks.remove_location(54421, "level_changer")
		level_tasks.remove_location(54422, "level_changer")
	else
		level_tasks.add_lchanger_underlocation()
	end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:save(packet)
	local pk1 = fake_net_packet.fake_net_packet()
	self:save_old(pk1)
	self:save_old(packet)
end

function actor_binder:save_old(packet)
	local save_treasure_manager = true

	--printf("actor_binder:save(): self.object:name()='%s'", self.object:name())
	object_binder.save(self, packet)

	--' Сохраняем уровень сложности
	if save_treasure_manager == true then
		packet:w_u8(level.get_game_difficulty() + 128)
	else
		packet:w_u8(level.get_game_difficulty())
	end


	--' Сохраняем данные об отключенном вводе
	if self.st.disable_input_time == nil then
		packet:w_bool(false)
	else
		packet:w_bool(true)
		utils.w_CTime(packet, self.st.disable_input_time)
	end

	xr_logic.pstor_save_all(self.object, packet)
	self.weather_manager:save(packet)

	sr_psy_antenna.save( packet )

	if save_treasure_manager == true then
		treasure_manager.save(packet)
	end

	task_manager.save(packet)
	self.actor_detector:save(packet)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:load(reader)
	--printf("actor_binder:load(): self.object:name()='%s'", self.object:name())
	object_binder.load(self, reader)
	--printf("actor_binder:object_binder.load(): self.object:name()='%s'", self.object:name())

	--' Загружаем уровень сложности
	local game_difficulty = reader:r_u8()

	local load_treasure_manager = false		 
	if game_difficulty >= 128 then			 
		game_difficulty = game_difficulty - 128
		load_treasure_manager = true		   
	end


	get_console():execute("g_game_difficulty "..game_difficulty_by_num[game_difficulty])

	if reader:r_eof() then
		abort("SAVE FILE IS CORRUPT")
	end

	local stored_input_time = reader:r_u8()
	if stored_input_time == true then
		self.st.disable_input_time = utils.r_CTime(reader)
	end

	xr_logic.pstor_load_all(self.object, reader)
	self.weather_manager:load(reader)

	sr_psy_antenna.load(reader)

	if load_treasure_manager == true then
		treasure_manager.load(reader)
	end


	task_manager.load(reader)
	self.actor_detector:load(reader)
end
----------------------------------------------------------------------------------------------------------------------

--старт префетча звуков
--if string.find(command_line(), "-noprefetch") == nil then
--	sound_prefetch.prefetch_sounds()
--end


-- Weapon functions
function hide_weapon()
	weapon_hide = true
end

function restore_weapon()
	weapon_hide = false
end

