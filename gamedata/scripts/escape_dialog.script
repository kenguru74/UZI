---------------------------------------------------------------------------------------------------------------
---------- 								 Dialog & InfoPortions Function									-----------
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
-- 							Trader Factions - из мода ABC Mod by Speed aka LW.								 --
---------------------------------------------------------------------------------------------------------------

function factions_repair_checkduty_r(trader, actor)
	if relation_registry.community_goodwill ("dolg", db.actor:id ()) < 0 then
		local chkgoodwill = relation_registry.community_goodwill("dolg", db.actor:id())
		
		if chkgoodwill > -100 and db.actor:money() >= 500 then return true end
		if chkgoodwill < -100 and chkgoodwill >= -1000 and db.actor:money() >= 1000 then return true end
		if chkgoodwill < -1000 and db.actor:money() >= 2500 then return true end
	end
	
	return false
end

function factions_repair_checkduty_j(trader, actor)
	local whatami = db.actor:character_community()
	
	if (relation_registry.community_goodwill ("dolg", db.actor:id()) >= 0) and (db.actor:money() >= 500) and (whatami ~= "actor_dolg") and (whatami == "actor") then return true
	else return false
	end
end

function factions_repair_checkfree_r(trader, actor)
	if relation_registry.community_goodwill ("freedom", db.actor:id()) < 0 then
		local chkgoodwill = relation_registry.community_goodwill("dolg", db.actor:id())
		if chkgoodwill > -100 and db.actor:money() >= 500 then return true end
		if chkgoodwill < -100 and chkgoodwill >= -1000 and db.actor:money() >= 1000 then return true end
		if chkgoodwill < -1000 and db.actor:money() >= 2500 then return true end
	else
		return false
	end
	
	return false
end

function factions_repair_checkfree_j(trader, actor)
	local whatami = db.actor:character_community()
	
	if (relation_registry.community_goodwill ("freedom", db.actor:id()) >= 0) and (db.actor:money() >= 500) and (whatami ~= "actor_freedom") and (whatami == "actor") then return true
	else
		return false
	end
end

function factions_repair_checkstalker_r(trader, actor)
	local whatami = db.actor:character_community()
	local gulag = xr_gulag.get_gulag_by_name ("esc_lager")
	
	if (gulag) then
		if (gulag:npc_is_enemy_to_anybody(db.actor)) and (db.actor:money() >= 500) and (whatami ~= "monolith") and (whatami ~= "bandit") and (whatami ~= "military") and (whatami ~= "killer") then
			return true
		end
	end
	
	return false
end

function factions_repair_checkstalker(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 500
	local gulag = xr_gulag.get_gulag_by_name ("esc_lager")
	
	if (gulag) then
		if gulag:npc_is_enemy_to_anybody(db.actor) and db.actor:money() >= 500 then
			item_name_and_price = game.translate_string("list_factions_repair_4").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
			db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
		end
	end
end

function factions_repair_setstalker_r(trader, actor)
	local howmuch = 500
	local gulag = xr_gulag.get_gulag_by_name ("esc_lager")
	
	if (gulag) then
		if gulag:npc_is_enemy_to_anybody(db.actor) and db.actor:money() >= 500 then
			local chkgoodwill = relation_registry.community_goodwill("stalker", db.actor:id())
			
			xr_gulag.setGulagRelation ("esc_lager", game_object.neutral, db.actor)
			relation_registry.set_community_goodwill ("stalker", db.actor:id(), 0)
			dialogs.relocate_money(actor, howmuch, "out")
		end
	end
end

function factions_repair_checkduty(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 0
	
	if db.actor ~= nil then 
		if relation_registry.community_goodwill ("dolg", db.actor:id()) < 0 then
			local chkgoodwill = relation_registry.community_goodwill("dolg", db.actor:id())
			if chkgoodwill > -100 and db.actor:money() >= 500 then howmuch = 500 end
			if chkgoodwill < -100 and chkgoodwill >= -1000 and db.actor:money() >= 1000 then howmuch = 1000 end
			if chkgoodwill < -1000 and db.actor:money() >= 2500 then howmuch = 2500 end
			item_name_and_price = game.translate_string("list_factions_repair_0").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
			db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
	elseif (relation_registry.community_goodwill ("dolg", db.actor:id()) >= 0) and (db.actor:money() >= 500) then
		howmuch = 500
		item_name_and_price = game.translate_string("list_factions_repair_1").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
		db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
	  end
	end
end

function factions_repair_checkfree(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 0
	
	if db.actor ~= nil then 
		if relation_registry.community_goodwill ("freedom", db.actor:id()) < 0 then
			local chkgoodwill = relation_registry.community_goodwill("freedom", db.actor:id ())
			if chkgoodwill > -100 and db.actor:money() >= 500 then howmuch = 500 end
			if chkgoodwill < -100 and chkgoodwill >= -1000 and db.actor:money() >= 1000 then howmuch = 1000 end
			if chkgoodwill < -1000 and db.actor:money() >= 2500 then howmuch = 2500 end
			
			item_name_and_price = game.translate_string("list_factions_repair_2").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
			db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
		elseif (relation_registry.community_goodwill ("freedom", db.actor:id()) >= 0) and (db.actor:money() >= 500) then
			howmuch = 500
			item_name_and_price = game.translate_string("list_factions_repair_3").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
			db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
		end
	end
end

function factions_repair_setduty_r(trader, actor)
	local howmuch = 0
	
	if db.actor ~= nil then 
		local chkgoodwill = relation_registry.community_goodwill("dolg", db.actor:id())
		if chkgoodwill > -100 and db.actor:money() >= 500 then howmuch = 500 end
		if chkgoodwill < -100 and chkgoodwill >= -1000 and db.actor:money() >= 1000 then howmuch = 1000 end
		if chkgoodwill < -1000 and db.actor:money() >= 2500 then howmuch = 2500 end
		
		dialogs.relocate_money(actor, howmuch, "out")
		relation_registry.set_community_goodwill ("dolg", db.actor:id(), 0)
	end
end

function factions_repair_setduty_j(trader, actor)
	if db.actor ~= nil then 
		dialogs.relocate_money(actor, 500, "out")
		db.actor:set_character_community("actor_dolg", 0, 0)
		
		local chkgoodwill = relation_registry.community_goodwill("dolg", db.actor:id())
		
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("dolg", db.actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("dolg", db.actor:id (), 200)
		end
	end
end

function factions_repair_setfree_r(trader, actor)
	local howmuch = 0
	
	if db.actor ~= nil then 
		local chkgoodwill = relation_registry.community_goodwill("freedom", db.actor:id())
		
		if chkgoodwill > -100 and db.actor:money() >= 500 then howmuch = 500 end
		if chkgoodwill < -100 and chkgoodwill >= -1000 and db.actor:money() >= 1000 then howmuch = 1000 end
		if chkgoodwill < -1000 and db.actor:money() >= 2500 then howmuch = 2500 end
		
		dialogs.relocate_money(actor, howmuch, "out")
		relation_registry.set_community_goodwill ("dolg", db.actor:id(), 0)
	end
end

function factions_repair_setfree_j(trader, actor)
	if db.actor ~= nil then 
		dialogs.relocate_money(actor, 500, "out")
		db.actor:set_character_community("actor_freedom", 0, 0)
		
		local chkgoodwill = relation_registry.community_goodwill("freedom", db.actor:id())
		
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("freedom", db.actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("freedom", db.actor:id(), 200)
		end
	end
end

function factions_repair_checkmon_j(trader, actor)
	local whatami = db.actor:character_community()
	if (db.actor:money() >= 500) and (whatami ~= "monolith") and (whatami == "actor") then return true
	else return false
	end
end

function factions_repair_checkmonolith(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 500
	
	if db.actor:money() >= 500 then
		item_name_and_price = game.translate_string("list_factions_repair_5").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
		db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
	end
end

function factions_repair_setmon_j(trader, actor)
	if db.actor ~= nil then 
		dialogs.relocate_money(actor, 500, "out")
		db.actor:set_character_community("monolith", 0, 0)
		
		local chkgoodwill = relation_registry.community_goodwill("monolith", db.actor:id())
		
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("monolith", db.actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("monolith", db.actor:id(), 200)
		end
	end
end

function factions_repair_bandit_j(trader, actor)
	local whatami = db.actor:character_community()
	
	if (db.actor:money() >= 1000) and (whatami ~= "bandit") and (whatami == "actor") then
		return true
	else
		return false
	end
end

function factions_repair_checkbandit(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 1000
	
		if db.actor:money() >= 1000 then
			item_name_and_price = game.translate_string("list_factions_repair_7").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
			db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
		end
end

function factions_repair_setbandit_j(trader, actor)
	if db.actor ~= nil then 
		dialogs.relocate_money(actor, 1000, "out")
		db.actor:set_character_community("bandit", 0, 0)
		
		local chkgoodwill = relation_registry.community_goodwill("bandit", db.actor:id())
		
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("bandit", db.actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("bandit", db.actor:id(), 200)
		end
	end
end

function factions_repair_mil_j(trader, actor)
	local whatami = db.actor:character_community()
	if (db.actor:money() >= 400) and (whatami ~= "military") and (whatami == "actor") then return true
	else return false
	end
end

function factions_repair_checkmil(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 400
	
		if db.actor:money() >= 400 then
			item_name_and_price = game.translate_string("list_factions_repair_6").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
			db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
		end
end

function factions_repair_setmil_j(trader, actor)
	if db.actor ~= nil then 
		dialogs.relocate_money(actor, 400, "out")
		db.actor:set_character_community("military", 0, 0)
		
		local chkgoodwill = relation_registry.community_goodwill("military", db.actor:id())
		
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("military", db.actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("military", db.actor:id(), 200)
		end
	end
end


function factions_repair_kill_j(trader, actor)
	local whatami = db.actor:character_community()
	
	if (db.actor:money() >= 30000) and (whatami ~= "killer") and (whatami == "actor") then
		return true
	else
		return false
	end
end

function factions_repair_checkkill(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 300
	
	if db.actor:money() >= 300 then
		item_name_and_price = game.translate_string("list_factions_repair_8").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
		db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
	end
end

function factions_repair_setkill_j(trader, actor)
	if db.actor ~= nil then 
		dialogs.relocate_money(actor, 300, "out")
		db.actor:set_character_community("killer", 0, 0)
		
		local chkgoodwill = relation_registry.community_goodwill("military", db.actor:id())
		
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("killer", db.actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("killer", db.actor:id(), 200)
		end
	end
end


function factions_repair_eco_j(trader, actor)
	local whatami = db.actor:character_community()
	
	if (db.actor:money() >= 500) and (whatami ~= "ecolog") and (whatami == "actor") then
		return true
	else
		return false
	end
end

function factions_repair_checkeco(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 500
	
	if db.actor:money() >= 500 then
		item_name_and_price = game.translate_string("list_factions_repair_10").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
		db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
	end
end

function factions_repair_seteco_j(trader, actor)
	if db.actor ~= nil then 
		dialogs.relocate_money(actor, 500, "out")
		db.actor:set_character_community("ecolog", 0, 0)
		
		local chkgoodwill = relation_registry.community_goodwill("ecolog", db.actor:id())
		
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("ecolog", db.actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("ecolog", db.actor:id(), 200)
		end
	end
end



function factions_repair_quit_j(trader, actor)
	local whatami = db.actor:character_community()
	
	if (whatami == "actor_dolg") or (whatami == "actor_freedom") or (whatami == "monolith") or (whatami == "bandit") or (whatami == "military") or (whatami == "killer") or (whatami == "ecolog") then
		if (db.actor:money() >= 1000) then
			return true
		end
	end
	
	return false
end

function factions_repair_checkquit(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 1000
	
	if db.actor:money() >= 1000 then
		item_name_and_price = game.translate_string("list_factions_repair_9").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
		db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
	end
end

function factions_repair_setquit_j(trader, actor)
	if db.actor ~= nil then 
		dialogs.relocate_money(actor, 1000, "out")
		db.actor:set_character_community("actor", 0, 0)
	end
end
--------------------------------------------------------------------------------------------------------
-- Trader
--------------------------------------------------------------------------------------------------------
function trader_alredy_give_job(trader, actor)
	if (has_alife_info("agroprom_military_case") and not has_alife_info("agroprom_military_case_done")) or
		(has_alife_info("escape_blockpost_case") and not has_alife_info("escape_blockpost_case_done")) or
		(has_alife_info("tutorial_artefact_start") and not has_alife_info("tutorial_artefact_done")) or
		(has_alife_info("tutorial_wounded_start") and not has_alife_info("esc_serious_talk"))
	then
		return true
	end
	return false 
end

function trader_give_extra_job(trader, actor)
	local actor = db.actor
	if has_alife_info("escape_blockpost_case") and not has_alife_info("escape_blockpost_case_done")
	then
		return true
	end
	return false
end

function bandits_die(actor,npc)
	local actor = db.actor
	if has_alife_info("esc_kill_bandits_quest_kill") and not has_alife_info("esc_kill_bandits_noquest_kill")
	then
		return true
	end
	return false
end

function trader_need_extra_job(trader, actor)
	if not has_alife_info("escape_blockpost_case") and 
		has_alife_info("esc_return")
	then
		return true
	end
	return false
end

function is_tutorial()
	return not has_alife_info("tutorial_end")
end

function is_not_tutorial()
	return has_alife_info("tutorial_end")
end

function is_not_tutorial_art(actor, trader)
	local tutorial_artefact = db.actor:object("af_blood_tutorial")
	if (has_alife_info("tutorial_artefact_start") and not has_alife_info("tutorial_artefact_done")
		and  tutorial_artefact ~= nil) or has_alife_info("tutorial_artefact_done")
	then
		return true
	end
	return false
end

function not_final_job(trader, actor)
	local actor = db.actor
	return not has_alife_info("escape_blockpost_case_done")
end

function trader_test(actor, npc)
 	printf ("!!!!!")	
	return true
end



function trader_dont_give_job(first_speaker, second_speaker)
	return not trader_alredy_give_job(first_speaker, second_speaker)
end

function finalize_quests(first_speaker, second_speaker)
	if tutorial_artefact_end(first_speaker, second_speaker) == true or
		tutorial_wounded_end(first_speaker, second_speaker) == true
	then
		return true
	end
	return false
end

function not_finalize_quests(first_speaker, second_speaker)
	return not this.finalize_quests(first_speaker, second_speaker)	
end

function tutorial_artefact_end(first_speaker, second_speaker)
	local actor = db.actor
	local tutorial_artefact = first_speaker:object("af_blood_tutorial")
	
	if has_alife_info("tutorial_artefact_start") and 
		not has_alife_info("tutorial_artefact_done") and
		tutorial_artefact ~= nil
	then
		return true
	end
	
	return false
end

function tutorial_artefact_have_not(first_speaker, second_speaker)
	local actor = db.actor
	local tutorial_artefact = first_speaker:object("af_blood_tutorial")
	
	if has_alife_info("tutorial_artefact_start") and not has_alife_info("tutorial_artefact_done") and tutorial_artefact == nil then
		return true
	end
	
	return false
end

function tutorial_wounded_end(first_speaker, second_speaker)
	local actor = db.actor
	
	if has_alife_info("tutorial_wounded_start") and has_alife_info("tutorial_wounded_give_info")	and not has_alife_info("esc_serious_talk") then
		return true
	end
	
	return false
end

function trader_dont_has_job(first_speaker, second_speaker)
	if trader_need_military_case(first_speaker, second_speaker) == false and trader_need_blockpost_box(first_speaker, second_speaker) == false then
		return true
	end
	
	return false
end


--' Escape tutorial artefact
function have_tutorial_artefact(first_speaker, second_speaker)
	return first_speaker:object("af_blood_tutorial") ~= nil
end

function give_medkit(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "medkit", "in")
end

function give_tutorial_artefact(first_speaker, second_speaker)
	dialogs.relocate_item_section(second_speaker, "af_blood_tutorial", "out")
end


--' Meet fox
function have_fox_info(first_speaker, second_speaker)
	return first_speaker:object("fox_flash") ~= nil
end

--' fox help
function transfer_medikit_to_fox (player, wounded)
	wounded:set_relation(game_object.friend, player)
	db.actor:give_info_portion("escape_fox_heal")
end

function give_weapon_to_actor (trader, actor)
	-- dialogs.relocate_item_section(trader, "hand_radio_f", "in")
end

--' Escape blockpost box
function have_blockpost_case(first_speaker, second_speaker)
	return first_speaker:object("quest_case_01") ~= nil
end


function give_blockpost_case(first_speaker, second_speaker)
	dialogs.relocate_item_section(second_speaker, "quest_case_01", "out")
end

function give_blockpost_case_reward(first_speaker, second_speaker)
	dialogs.relocate_money(first_speaker, 100, "in")
end

--' Agroprom military case
function trader_need_military_case(first_speaker, second_speaker)
	if has_alife_info("esc_serious_talk") and not has_alife_info("agroprom_military_case") then
		return true
	end
	
	return false
end

--' Escape trader artefact
function have_artefact_from_fleshes(first_speaker, second_speaker)
	local actor = db.actor
	
	if actor ~= nil and (actor:object("af_vyvert") ~= nil or actor:object("af_gravi") ~= nil or actor:object("af_gold_fish") ~= nil) then
		return true
	end
	return false
end


--' Ящик с блокпоста
function trader_need_blockpost_box(first_speaker, second_speaker)
	if has_alife_info("tutorial_end") and has_alife_info("esc_trader_speak") and not has_alife_info("escape_blockpost_case") then
		return true
	end
	
	return false
end

--' tutorial wounded in vagon
function wounded_need_help(first_speaker, second_speaker)
	local actor = db.actor
	return actor ~= nil and not has_alife_info( "tutorial_wounded_help" )
end

--' trader needs military documents
function trader_need_military_document(first_speaker, second_speaker)
	if has_alife_info("escape_blockpost_case_done") and
		not has_alife_info("agroprom_military_case")
	then
		return true
	end
	
	return false
end

--' trader dialog about docs from labx18
function actor_has_documents (actor, npc)
	if actor:object("dar_document4") then
		return true
	else
		return false
	end
end

--' Escape dynamite for Wolf
function transfer_wolf_reward(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "af_night_star", "in")
end

function wolf_additional_reward(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "af_dummy_dummy", "in")
end


--' Escape Wounded's flash
function wounded_give_flash(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "esc_wounded_flash", "in")
end

function have_wounded_flash(first_speaker, second_speaker)
	return first_speaker:object("esc_wounded_flash") ~= nil
end

function dont_have_wounded_flash(first_speaker, second_speaker)
	return not have_wounded_flash(first_speaker, second_speaker)
end

function give_wounded_flash(first_speaker, second_speaker)
	dialogs.relocate_item_section(second_speaker, "esc_wounded_flash", "out")
	dialogs.relocate_item_section(second_speaker, "af_fuzz_kolobok", "in")
end

function give_grenade_f1_to_actor(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "grenade_f1", "in")
end

--' Escape bandits factory
function give_factory_reward_trader(first_speaker, second_speaker)
	dialogs.relocate_money(first_speaker, 150, "in")
end

--' Give X-18 documents read
function give_documents_reward (first_speaker, second_speaker)
	dialogs.relocate_money(first_speaker, 500, "in")
end

--' Kill killers raid
function give_reward_killers(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "af_dummy_dummy", "in")
end

--' Soldiers on bridge
function has_soldiers_bribe(actor, npc)
	return actor:money() >= 150
end

function give_soldiers_bribe(actor, npc)
	dialogs.relocate_money(npc, 150, "out")
end

function fox_pay_money(actor, npc)
	dialogs.relocate_money(npc, 150, "in")
	treasure_manager.get_treasure_manager():give_treasure("esc_secret_truck_goods")
end

function run_tutorial_pda(first_speaker, second_speaker)
	printf("!-!-!")
	first_speaker:stop_talk()
	second_speaker:stop_talk()
	game.start_tutorial("part_1_pda")
end

function wolf_precond_univ (actor, npc)
	return has_alife_info("esc_kill_bandits_quest_done") or (has_alife_info("tutorial_wounded_give_info") and not has_alife_info("esc_kill_bandits_quest_have"))
end

-- Шустрый
function shustriy_drug(first_speaker, second_speaker)
	first_speaker:set_relation(game_object.friend, second_speaker)
end

-- Волк
function volk_drug(first_speaker, second_speaker)
	second_speaker:set_relation(game_object.friend, first_speaker)
end
